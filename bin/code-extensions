#!/bin/bash

show_help() {
cat << 'EOF'
This script keeps your VSCode extensions up-to-date with your dotfiles.

* To start using this script, run: `code-extensions snapshot` and commit
  `~/.vscode/extensions.list` to your dotfiles.
* To show the differences between your dotfiles and the extensions currently
  installed, run: `code-extensions show`
* To install and uninstall extensions to match extensions.list, run
  `code-extensions sync`
* To set your currently installed extensions as official, run
  `code-extensions snapshot`
EOF
}

# Hope this script doesn't have a future: https://code.visualstudio.com/updates/v1_43#_settings-sync


extensions() {
  code --list-extensions
}

diff_list() {
  diff -u <(extensions) ~/.vscode/extensions.list
}

repeat-all() {
  action="$1"
  shift

  while [ -n "$1" ]; do
    echo code "$action" "$1"
    code "$action" "$1" || break
    shift
  done

  # if there was an error, show the extensions we're not installing
  [ -n "$1" ] && echo "SKIPPING: $@"
}

if [ ! -f ~/.vscode/extensions.list ] && [ "$1" != 'snapshot' ]; then
  echo "please set things up by running:"
  echo "  $0 snapshot"
  exit 1
fi

case "$1" in
  'snapshot')
    extensions > ~/.vscode/extensions.list
    ;;

  'sync' | 'install' | 'uninstall' | 'remove')
    if [ "$1" != 'uninstall' ] && [ "$1" != 'remove' ]; then
      to_install="$(diff_list | sed -n 's/^-\([^-].*\)/\1/p')"
      repeat-all --install-extension $to_install
    fi
    if [ "$1" != 'install' ]; then
      to_remove="$(diff_list | sed -n 's/^\+\([^+].*\)/\1/p')"
      repeat-all --uninstall-extension $to_remove
    fi
    if [ -z "$to_install" ] && [ -z "$to_remove" ]; then
      echo up to date
    fi
    ;;

  'help')
    show_help
    ;;

  'show' | '')
    cat << 'EOF'
   '+' means `code-extensions sync` will add this extension
   '-' means `code-extensions sync` will remove it.'
EOF
    diff_list | tail +3
    ;;

  *)
    echo unknown command $1
    echo try: $0 snapshot, show, or sync
esac
